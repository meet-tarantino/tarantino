#!/usr/bin/env bash

BASE_COMMANDS="browse check clone create dc destroy install ip pull recreate restart upgrade usage version workspace"
WORKSPACE_COMMANDS="init add edit rm ls use current upgrade"

tarantino() {
	tt $@
}

tt_complete() {
	local word=
	local cmds=
	if [ $1 == '-n' ]; then
		shift;
		word=
		cmds=($@)
	else
		word=${@: -1}
		cmds=(${@:1:$#-1})
	fi

	local basecmd=${cmds[0]}
	local numcmds=${#cmds[@]}

	if [ $numcmds -gt 1 ]; then
		#multi cmd case
		case "$basecmd" in
		create)
			completion_all_services $word ;;
		destroy|recreate)
			completion_running_services $word ;;
		pull|clone|check)
			completion_services $word ;;
		workspace)
			if [ $numcmds -eq 2 ]; then
				case "${cmds[1]}" in
				use|rm)
					completion_available_workspaces $word ;;
				esac
			fi
		esac
	else
		#single arg case
		case "$basecmd" in
		tt|"")
			completion_base $word ;;
		create|browse)
			completion_all_services $word ;;
		destroy|recreate|ip)
			completion_running_services $word ;;
		pull|clone|check)
			completion_services $word ;;
		workspace)
			completion_workspace $word ;;
		esac
	fi
}

completion_base() {
	echo "$BASE_COMMANDS"
}

completion_all_services() {
	tarantino get_services 2> /dev/null
}

completion_services() {
	tarantino get_services_with_source 2> /dev/null
}

completion_running_services() {
	local running_ids=$(docker ps -q)
	if [ ! -z "$running_ids" ]; then
		docker inspect --format \
			'{{index .Config.Labels "com.docker.compose.project"}} {{index .Config.Labels "com.docker.compose.service"}}' \
			$running_ids | sed -n "s/^$(tarantino get_workspace) //p"
	fi
}

completion_workspace() {
	echo "$WORKSPACE_COMMANDS"
}

completion_available_workspaces() {
	tarantino get_available_workspaces 2> /dev/null
}

tt_complete $@

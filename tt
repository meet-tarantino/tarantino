#!/bin/bash

# variables
TT_PROJECTS=${TT_PROJECTS:-~/projects}

TT_IS_GLOBAL=$([ "$0" = "/usr/local/bin/tt" ] && echo true || echo false)
TT_SHARE=$([ $TT_IS_GLOBAL = true ] && echo /usr/local/share/tarantino || dirname $0)
TT_HOME=${TT_HOME:-~/.tt}

source $TT_SHARE/dc.sh
source $TT_SHARE/install.sh
source $TT_SHARE/parse-yaml.sh
source $TT_SHARE/workspace.sh

tt_get_services() {
	dc_get_services
}

tt_get_services_with_source() {
	dc_get_services_with_source
}

tt_get_available_workspaces() {
	ws_ls
}

info() {
	echo INFO: $*
}

main() {
	local user=${SUDO_USER:-$USER}
	if ! groups $user | grep &>/dev/null '\bdocker\b'; then
		>&2 echo WARNING: You\'re not in the \"docker\" group. You may need to log out and back in.
		>&2 echo
	fi

	local workspace_dir=$(get_workspace_dir)
	if [[ -z "$workspace_dir" && ! -z "$1" ]]; then
		case "$1" in
		install) ;;
		upgrade) ;;
		workspace) ;;
		*)
			>&2 echo "ERROR: You don't have an active workspace. Run 'tt workspace use <workspace>' to select one."
			>&2 echo
			>&2 echo Available workspaces:
			for dep in $(ws_ls); do
				>&2 echo "  $dep"
			done
			return 1
			;;
		esac
	else
		## load workspace plugins
		if [ -d "$workspace_dir/plugins" ]; then
			for plugin in $(find "$workspace_dir/plugins" -name '*.sh')
			do
				source $plugin
			done
		fi
	fi

	run_sub_command tt $@
}

run_sub_command() {
	local prefix=$1
	shift

	if [ $# -eq 0 ]; then
		$prefix\_usage
		return 1
	fi

	local cmd=$1
	shift

	$prefix\_$cmd $*
}

tt_header() {
	echo "tarantino - cross-service development environment"
	echo
}

tt_usage() {
	tt_header
	echo "usage: tt <command> [args]"
	echo
	echo commands:
	echo
	echo '  browse <container[:port][path]> - launch a page of a named container in your browser'
	echo '  check [service] - check all [or named] source directories'
	echo '  clone [service] - clone all [or named] source directories'
	echo '  create [container...] - create all [or named] containers'
	echo '  dc - run docker-compose commands in the context of your workspace'
	echo '  destroy [container...] - destroy all [or named] containers'
	echo '  install - prepare environment for tarantino'
	echo '  ip <container> - retrieve ip address of a specific container'
	echo '  pull [service] - pull sources for all [or named] projects without changes'
	echo '  recreate [container...] - recreate all [or named] containers'
	echo '  restart - restart all containers'
	echo '  upgrade - upgrade to latest tarantino version'
	echo '  workspace [command] - create, remove and switch workspaces'
}

tt_browse() {
	local raw=$(echo $* | sed 's/ //g') # merge all args into 1 string
	local container=$raw
	local path=""
	local port=""

	local parseRegex='^([^:/?#]+)(:[0-9]+)?([\/?#].*)?'
	if [[ $raw =~ $parseRegex ]]; then
	  container=${BASH_REMATCH[1]}
	  port=${BASH_REMATCH[2]}
	  path=${BASH_REMATCH[3]}
	else
	  tt_usage | grep -e '^[ ]*browse'
	  return 1
	fi

	local ip=$(tt_ip $container)
	local url=http://$ip$port$path

	if [ "$ip" = "" ]; then
		echo $container is not running, starting
		tt_create $container

		local ip=$(tt_ip $container)
		local host=http://$ip$port
		local url=$host$path

		until curl $host &> /dev/null; do
			sleep 0.25
			echo waiting for $container web server to start: curl $host
		done
	fi

	echo Opening browser to $url...
	x-www-browser $url &> /dev/null &
}

tt_check() {
	local projects=$TT_PROJECTS
	local service=$(dc_get_service_and_dependencies_with_source $@)
	local success=true

	for service in $service; do
		if [ ! -d "$projects/$service" ]; then
			echo $service not found in projects directory $projects.
			success=false
		fi
	done

	if [ "$success" = "true" ]; then # return success/error code
		echo All projects found in projects directory $projects.
		return 0
	else
		return 1
	fi
}

tt_clone() {
	local projects=$TT_PROJECTS
	local services=$(dc_get_service_and_dependencies $@)
	eval "declare -A TT_SOURCES=($(dc_get_sources))" # sources hashtable

	pushd . &> /dev/null

	for service in $services; do
		local src=${TT_SOURCES[$service]}

		# if source is defined but directory doesn't exist
		if [ ! -z "$src" -a ! -d "$projects/$service" ]; then
			echo $service not found in projects directory $projects, cloning it.
			git clone $src $projects/$service || return 1;

			# run npm install for any npm packages (the service, or its components)
			find "$projects/$service" -name 'package.json' -not -path "**/bower_components/*" | xargs --no-run-if-empty dirname | grep -v 'node_modules' | while read module; do
				cd $module
				echo in $module directory running: npm install
				npm install
			done
		fi
	done

	popd &> /dev/null
}

tt_pull() {
	local projects=$TT_PROJECTS
	local services=$(dc_get_service_and_dependencies_with_source $@)

	local skipped=
	local updated=

	local current=

	pushd .
	for service in $services; do
		if [ -d "$projects/$service" ]; then
			cd $projects/$service
			echo ---- $service ----
			if [ "$(git status --porcelain | wc -c)" = "0" ]; then
				current=$(git rev-parse HEAD)
				git pull --rebase --ff-only
				if [ $? -ne 0 ]; then
					skipped="$skipped $service"
				elif [ $current != "$(git rev-parse HEAD)" ]; then
					updated="$updated $service"
				fi
			else
				echo Skipping $service because the working directory is not clean.
				skipped="$skipped $service"
			fi
		fi
	done
	echo
	echo Updated: $updated
	echo Not Clean: $skipped
	popd
}

tt_create() {
	if ! tt_check $@; then
		echo "NOTE: You must clone service repositories before creating containers; otherwise, empty root-privilege directories would be created and that's poop."
		echo 'Running "tt clone" to retrieve the missing repositories.'
		tt_clone $@
	fi
	dc up -d $@
	for service in $@; do
		echo $service: $(tt_ip $service)
	done
}

tt_destroy() {
	if [[ $# -eq 0 ]]; then
		dc kill
		dc down -v # destroys networks, etc.
	else
		dc kill $@
		dc rm -fv $@
	fi
}

tt_ip() {
	docker inspect --format '{{ .NetworkSettings.Networks.'$(get_workspace)'_default.IPAddress }}' $(get_workspace)_$1\_1
}

tt_recreate() {
	tt_destroy $@
	info creating containers
	tt_create $@
}

tt_restart() {
	dc kill $@
	dc start $@
}

tt_upgrade() {
	local tmpdir=$(mktemp -d)
	git clone git@github.com:meet-tarantino/tarantino.git $tmpdir || return 1
	sudo echo "About to launch installation. Please wait for confirmation that install is complete."
	sudo bash -c "cd $tmpdir; sleep 1s; make install" &
}

tt_get_workspace() {
	get_workspace
}

main $@

#!/bin/bash

# variables
TT_PROJECTS=${TT_PROJECTS:-~/projects}

IS_GLOBAL=$([ "$0" = "/usr/local/bin/tt" ] && echo true || echo false)
TT_SHARE=$([ $IS_GLOBAL = true ] && echo /usr/local/share || dirname $0)
TT_HOME=${TT_HOME:-~/.tt}

NOT_SERVICES_PATTERN='mongo|redis|rabbit|graphite|elasticsearch|kibana|grafana|dynamo'
SAMPLE_DATA='sample-data'

source $TT_SHARE/parse-util.sh
source $TT_SHARE/dc.sh
source $TT_SHARE/workspace.sh

tt_get_all_services() {
	dc_get_all_services
}

tt_get_services() {
	dc_get_services
}

info() {
	echo INFO: $*
}

main() {
	local user=${SUDO_USER:-$USER}
	if ! groups $user | grep &>/dev/null '\bdocker\b'; then
		>&2 echo WARNING: You\'re not in the \"docker\" group. You may need to log out and back in.
		>&2 echo
	fi

	if [[ "$(pwd)" == *tarantino* && $IS_GLOBAL = true && "$2" != "ip" ]]; then
		>&2 echo WARNING: You\'re running global tarantino while working on tarantino locally.
		>&2 echo
	fi

	local prefix=$1
	shift

	if [ $# -eq 0 ]; then
		$prefix\_usage
		return 1
	fi

	local cmd=$1
	shift

	$prefix\_$cmd $*
}

tt_header() {
	echo "tarantino - cross-service development environment"
	echo
}

tt_usage() {
	tt_header
	echo "usage: tt <command> [args]"
	echo
	echo commands:
	echo
	echo '  api - launch the api homepage in your browser'
	echo '  browse <container[:port][path]> - launch a page of a named container in your browser'
	echo '  check [service] - check all [or named] source directories'
	echo '  clone [service] - clone all [or named] source directories'
	echo '  create [container] - create all [or named] containers'
	echo '  dc - run docker-compose commands in the context of your workspace'
	echo '  destroy [container] - destroy all [or named] containers'
	echo '  install - prepare environment for tarantino'
	echo '  ip <container> - retrieve ip address of a specific container'
	echo '  npm_reinstall - remove and reinstall all npm module dependences'
	echo '  pull [service] - pull sources for all [or named] projects without changes'
	echo '  recreate [container] - recreate all [or named] containers'
	echo '  restart - restart all containers'
	echo '  upgrade - upgrade to latest tarantino version'
	echo '  usage - usage and command overview'
	echo '  workspace [command] - create, remove and switch workspaces'
}

tt_browse() {
	local raw=$(echo $* | sed 's/ //g') # merge all args into 1 string
	local container=$raw
	local path=""
	local port=""

	local parseRegex='^([^:/?#]+)(:[0-9]+)?([\/?#].*)?'
	if [[ $raw =~ $parseRegex ]]; then
	  container=${BASH_REMATCH[1]}
	  port=${BASH_REMATCH[2]}
	  path=${BASH_REMATCH[3]}
	else
	  tt_usage | grep -e '^[ ]*browse'
	  return 1
	fi

	local ip=$(tt_ip $container)
	local url=http://$ip$port$path

	if [ "$ip" = "" ]; then
		echo $container is not running, starting
		tt_create $container

		local ip=$(tt_ip $container)
		local host=http://$ip$port
		local url=$host$path

		until curl $host &> /dev/null; do
			sleep 0.25
			echo waiting for $container web server to start: curl $host
		done
	fi

	echo Opening browser to $url...
	x-www-browser $url &> /dev/null &
}

tt_logs() {
	tt_browse kibana :80
}

tt_check() {
	local projects=$TT_PROJECTS
	local repos=$(dc_get_repos $*)
	local success=true

	for repo in $repos; do
		if [ ! -d "$projects/$repo" ]; then
			echo $repo not found in projects directory $projects.
			success=false
		fi
	done

	if [ "$success" = "true" ]; then # return success/error code
		echo All projects found in projects directory $projects.
		return 0
	else
		return 1
	fi
}

tt_clone() {
	local projects=$TT_PROJECTS
	local repos=$(dc_get_repos $*)
	local success=true

	pushd . &> /dev/null
	for repo in $repos; do
		if [ ! -d "$projects/$repo" ]; then
			echo $repo not found in projects directory $projects, cloning it.
			git clone git@github.com:360incentives/$repo.git $projects/$repo || return 1;

			# run npm install for any npm packages (the service, or its components)
			find "$projects/$repo" -name 'package.json' -not -path "**/bower_components/*" | xargs --no-run-if-empty dirname | grep -v 'node_modules' | while read module; do
				cd $module
				echo in $module directory running: npm install
				npm install
			done
		fi
	done
	popd &> /dev/null
}

tt_npm_reinstall() {
	tt_module_exec rm -rf node_modules
	tt_module_exec npm install
}

tt_pull() {
	local projects=$TT_PROJECTS
	local repos=$(dc_get_repos $*)

	local skipped=
	local updated=

	local current=

	pushd .
	for repo in $repos; do
		if [ -d "$projects/$repo" ]; then
			cd $projects/$repo
			echo ---- $repo ----
			if [ "$(git status --porcelain | wc -c)" = "0" ]; then
				current=$(git rev-parse HEAD)
				git pull --rebase --ff-only
				if [ $? -ne 0 ]; then
					skipped="$skipped $repo"
				elif [ $current != "$(git rev-parse HEAD)" ]; then
					updated="$updated $repo"
				fi
			else
				echo Skipping $repo because the working directory is not clean.
				skipped="$skipped $repo"
			fi
		fi
	done
	echo
	echo Updated: $updated
	echo Not Clean: $skipped
	popd
}

tt_module_exec() {
	local projects=$TT_PROJECTS
	local services=$(tt_get_services)
	local operation=$@
	local success=true

	pushd .
	for service in $services; do
		if [ -d "$projects/$service" ]; then
			find $projects/$service -name 'package.json' -not -path "**/bower_components/*" | xargs dirname | grep -v 'node_modules' | while read module; do
				echo in $module directory running: $operation
				cd $module
				$operation
			done
		fi
	done
	popd
}

tt_npm() {
	tt_module_exec npm $1
}

tt_create() {
	if ! tt_check $@; then
		echo "NOTE: You must clone service repositories before creating containers; otherwise, empty root-privilege directories would be created and that's poop."
		echo 'Running "tt clone" to retrieve the missing repositories.'
		tt_clone $@
	fi
	dc up -d $@
	for service in $@; do
		echo $service: $(tt_ip $service)
	done
}

tt_destroy() {
	if [[ $# -eq 0 ]]; then
		dc kill
		dc down -v # destroys networks, etc.
	else
		dc kill $@
		dc rm -fv $@
	fi
}

install_docker_compose() {
	curl -L https://github.com/docker/compose/releases/download/1.6.0/docker-compose-`uname -s`-`uname -m` > /tmp/docker-compose
	sudo mv /tmp/docker-compose /usr/local/bin/
	sudo chmod +x /usr/local/bin/docker-compose
}

tt_is_docker_installed() {
	if hash docker 2>/dev/null; then
		local version=$(docker -v | sed 's/^Docker version \([^,]*\),.*/\1/')
		local versionMax=$(printf "$version\n1.9.1" | sort -V | tail -1)
		if [ "$versionMax" = "1.9.1" ]; then
			info docker version 1.10+ is required but you have $version, updating docker
			return 1
		else
			info docker already installed.
			return 0
		fi
	else
		info installing docker...
		return 1
	fi
}

tt_is_docker_compose_installed() {
	if hash docker-compose 2>/dev/null; then
		# this comparison should keep working for a while
		local version=$(docker-compose -v | sed 's/^docker-compose version \([^,]*\),.*/\1/')
		local versionMax=$(printf "$version\n1.5.2" | sort -V | tail -1)
		if [ "$versionMax" = "1.5.2" ]; then
			info docker-compose version 1.6+ is required but you have $version, updating docker-compose
			return 1
		else
			info docker-compose already installed.
			return 0
		fi
	else
		info installing docker-compose...
		return 1
	fi
}

tt_install() {
	user=${SUDO_USER:-$USER}

	if [ ! -d ~/projects ]; then
		mkdir -p ~/projects
		chown $user:$user ~/projects
	fi

	if hash curl 2>/dev/null; then
		info curl already installed.
	else
		info Installing curl...
		sudo apt-get install -y curl
	fi

	if ! tt_is_docker_installed; then
		info "It's coffee time 'cause this will take a while"
		curl -sSL https://get.docker.com | sudo sh
	fi

	if ! tt_is_docker_compose_installed; then
		install_docker_compose
	fi

	# if we know how to check for certificates ...
	if [ -d /usr/share/ca-certificates ]; then
		if [ "$(find /usr/share/ca-certificates -name 'Entrust*G2*')" = "" ]; then
			info "You're certificate store is out of date, updating certificates"
			sudo apt-get update &> /dev/null
			sudo apt-get install -y ca-certificates
			sudo service docker restart
		else
			info "Entrust G2 certificate found."
		fi
	fi

	if groups $user | grep &>/dev/null '\bdocker\b'; then
		info $user already has access to run docker commands.
	else
		info Granting $user access to run docker commands without sudo. You\'ll need to re-login to take affect.
		sudo usermod -a -G docker $user
	fi

	# set up service cache
	# REMOVE CACHING until we figure this out for multiple workspaces that can change
	# ALL_SERVICES_FILE="$TT_WORKSPACE_DIR/all_services.txt"
	#dc config --services > "$ALL_SERVICES_FILE"

	if ! hash jq; then
		echo 'Warning: you do not appear to have `jq` installed, `tt data` usage commands will not be complete'
		echo 'run `sudo apt-get install -y jq` to resolve this'
	fi

	if [ ! -d "$TT_PROJECTS/$SAMPLE_DATA" ]; then
		echo 'Warning: you do not have the sample-data repository, `tt data` usage will not list sample scripts'
		echo 'run `tt clone sample-data` to resolve this'
	fi

	# Folks are already waiting during this process, so we may as well do the clone now
	# to prevent yet another waiting period when they actually try to run "tt create".
	# We don't want to clone the repositories as root to ensure privileges and SSH keys are correct.

	## Now that we can tt create 'specific' that will only clone the required repos, this might be more than necessary
	#sudo -u $SUDO_USER tt clone
}

tt_ip() {
	docker inspect --format '{{ .NetworkSettings.Networks.'$(get_workspace)'_default.IPAddress }}' $(get_workspace)_$1\_1
}

tt_recreate() {
	tt_destroy $@
	info creating containers
	tt_create $@
}

tt_restart() {
	dc kill $@
	dc start $@
}

tt_upgrade() {
	local tmpdir=$(mktemp -d)
	git clone git@github.com:360incentives/tarantino.git $tmpdir || return 1 sudo echo About to launch installation. Please wait for confirmation that install is complete.
	sudo bash -c "cd $tmpdir; sleep 1s; make install" &
}

main tt $@
